* WASM Actions
#+BEGIN: clocktable :scope subtree :maxlevel 2
#+CAPTION: Clock summary at [2022-11-18 Fri 13:23]
| Headline                                     | Time       |      |
|----------------------------------------------+------------+------|
| *Total time*                                 | *2d 12:14* |      |
|----------------------------------------------+------------+------|
| WASM Actions                                 | 2d 12:14   |      |
| \_  Set up development environment           |            | 0:56 |
| \_  Define project goals                     |            | 0:49 |
| \_  Set up testing frameworks                |            | 0:17 |
| \_  Create initial README                    |            | 0:12 |
| \_  Investigate WASM support in Node         |            | 1:37 |
| \_  Create a basic WASI application in Rust  |            | 0:41 |
| \_  Create a test WASM program and run it... |            | 1:37 |
| \_  Set up a CI system that runs frontend... |            | 0:19 |
| \_  Studied WebAssembly fundamentals         |            | 3:26 |
| \_  Process a single HTTP request inside...  |            | 0:53 |
| \_  Implement basic JWT authentication       |            | 1:28 |
| \_  Add endpoints for register and login     |            | 0:24 |
| \_  Select and set up a database             |            | 2:35 |
| \_  Find a way to run DB tests in CI         |            | 0:05 |
| \_  Implement login on frontend              |            | 1:38 |
| \_  Set up a podman-compose file to help...  |            | 1:07 |
| \_  Fix CI                                   |            | 0:10 |
| \_  Prototype frontend dashboard             |            | 4:15 |
| \_  Clear frontend tests                     |            | 0:02 |
| \_  Fix null issue in backend login check    |            | 0:28 |
| \_  Development environment and tool...      |            | 1:13 |
| \_  Implement uploading a WASM module        |            | 1:23 |
| \_  Investigate WasmEdge                     |            | 2:02 |
| \_  Replace Node WASI runner with WasmEdge   |            | 4:59 |
| \_  Fix CI tests                             |            | 0:12 |
| \_  Implement ability to select the WASM...  |            | 1:17 |
| \_  Pass all CGI details to the WASM...      |            | 7:45 |
| \_  Manage WASM Actions in the database      |            | 3:35 |
| \_  Create endpoints to access Actions       |            | 1:28 |
| \_  Create a proper form for uploading...    |            | 0:56 |
| \_  Better sessions management               |            | 0:50 |
| \_  Implement a logout button                |            | 2:59 |
| \_  Turn the WASM middleware into a...       |            | 1:07 |
| \_  Make endpoints protectable with a token  |            | 3:29 |
| \_  Namespace endpoints by username          |            | 1:23 |
| \_  Make sure same name cannot be reused...  |            | 1:57 |
| \_  Create a notification area in...         |            | 0:40 |
#+END:

** DONE Set up development environment
:LOGBOOK:
CLOCK: [2022-09-03 la 16:00]--[2022-09-03 la 16:56] =>  0:56
:END:
** DONE Define project goals
:LOGBOOK:
CLOCK: [2022-09-03 la 16:59]--[2022-09-03 la 17:48] =>  0:49
:END:

** DONE Set up testing frameworks
:LOGBOOK:
CLOCK: [2022-09-05 ma 19:00]--[2022-09-05 ma 19:17] =>  0:17
:END:
** DONE Create initial README
:LOGBOOK:
CLOCK: [2022-09-05 ma 19:20]--[2022-09-05 ma 19:32] =>  0:12
:END:
** DONE Investigate WASM support in Node
:LOGBOOK:
CLOCK: [2022-09-06 ti 19:16]--[2022-09-06 ti 20:53] =>  1:37
:END:
https://nodejs.dev/en/learn/nodejs-with-webassembly/
https://nodejs.org/api/wasi.html
https://medium.com/geekculture/webassembly-for-node-js-13ef6bec0a0
https://rustwasm.github.io/docs/wasm-bindgen/examples/index.html
Read --> Programming WebAssembly with Rust
https://medium.com/@shyamsundarb/wasm-wasi-wagi-web-assembly-modules-in-rust-af7335e80160
** DONE Create a basic WASI application in Rust
:LOGBOOK:
CLOCK: [2022-09-07 Wed 14:39]--[2022-09-07 Wed 15:20] =>  0:41
:END:
** DONE Create a test WASM program and run it from the backend
:LOGBOOK:
CLOCK: [2022-09-10 la 17:12]--[2022-09-10 la 18:49] =>  1:37
:END:
** DONE Set up a CI system that runs frontend and backend tests
:LOGBOOK:
CLOCK: [2022-09-10 la 16:51]--[2022-09-10 la 17:10] =>  0:19
:END:
** STRT Studied WebAssembly fundamentals
:LOGBOOK:
CLOCK: [2022-09-11 su 16:34]--[2022-09-11 su 17:00] =>  0:26
CLOCK: [2022-09-11 su 10:03]--[2022-09-11 su 13:03] =>  3:00
:END:
** DONE Process a single HTTP request inside a WASM workload and return response
:LOGBOOK:
CLOCK: [2022-09-11 su 15:39]--[2022-09-11 su 16:32] =>  0:53
:END:

** DONE Implement basic JWT authentication
:LOGBOOK:
CLOCK: [2022-09-17 la 14:51]--[2022-09-17 la 16:19] =>  1:28
:END:
** DONE Add endpoints for register and login
:LOGBOOK:
CLOCK: [2022-09-19 ma 19:01]--[2022-09-19 ma 19:25] =>  0:24
:END:
** DONE Select and set up a database
:LOGBOOK:
CLOCK: [2022-09-25 su 13:16]--[2022-09-25 su 15:51] =>  2:35
:END:
** DONE Find a way to run DB tests in CI
:LOGBOOK:
CLOCK: [2022-09-25 su 15:55]--[2022-09-25 su 16:00] =>  0:05
:END:
** DONE Implement login on frontend
:LOGBOOK:
CLOCK: [2022-09-27 ti 16:35]--[2022-09-27 ti 18:13] =>  1:38
:END:
** DONE Set up a podman-compose file to help deployments
:LOGBOOK:
CLOCK: [2022-09-28 ke 16:35]--[2022-09-28 ke 17:42] =>  1:07
:END:
** DONE Fix CI
:LOGBOOK:
CLOCK: [2022-09-28 ke 17:43]--[2022-09-28 ke 17:53] =>  0:10
:END:
** DONE Prototype frontend dashboard
:LOGBOOK:
CLOCK: [2022-10-01 la 14:15]--[2022-10-01 la 16:13] =>  1:58
CLOCK: [2022-10-01 la 09:55]--[2022-10-01 la 12:12] =>  2:17
:END:
** DONE Clear frontend tests
:LOGBOOK:
CLOCK: [2022-10-01 la 16:19]--[2022-10-01 la 16:20] =>  0:01
CLOCK: [2022-10-01 la 16:15]--[2022-10-01 la 16:16] =>  0:01
:END:
** DONE Fix null issue in backend login check
:LOGBOOK:
CLOCK: [2022-10-02 su 11:10]--[2022-10-02 su 11:38] =>  0:28
:END:
** DONE Development environment and tool maintenance
:LOGBOOK:
CLOCK: [2022-10-02 su 09:57]--[2022-10-02 su 11:10] =>  1:13
:END:
** DONE Implement uploading a WASM module
:LOGBOOK:
CLOCK: [2022-10-02 su 15:39]--[2022-10-02 su 17:02] =>  1:23
:END:
** TODO Write frontend tests
** DONE Investigate WasmEdge
:LOGBOOK:
CLOCK: [2022-10-04 ti 12:30]--[2022-10-04 ti 14:32] =>  2:02
:END:
https://wasmedge.org/

** DONE Replace Node WASI runner with WasmEdge
:LOGBOOK:
CLOCK: [2022-10-08 la 13:18]--[2022-10-08 la 15:57] =>  2:39
CLOCK: [2022-10-07 Fri 13:16]--[2022-10-07 pe 15:36] =>  2:20
:END:

** DONE Fix CI tests 
:LOGBOOK:
CLOCK: [2022-10-08 la 16:13]--[2022-10-08 la 16:25] =>  0:12
:END:
** DONE Implement ability to select the WASM workload
:LOGBOOK:
CLOCK: [2022-10-09 su 13:03]--[2022-10-09 su 14:20] =>  1:17
:END:
** DONE Pass all CGI details to the WASM workload
:LOGBOOK:
CLOCK: [2022-10-16 su 09:22]--[2022-10-16 su 10:40] =>  1:18
CLOCK: [2022-10-15 la 08:45]--[2022-10-15 la 11:34] =>  2:49
CLOCK: [2022-10-12 Wed 13:32]--[2022-10-12 Wed 14:51] =>  1:19
CLOCK: [2022-10-09 su 14:20]--[2022-10-09 su 16:39] =>  2:19
:END:
*** DONE REQUEST_METHOD
*** DONE PATH_INFO
*** DONE QUERY_STRING
*** DONE Request body
** DONE Manage WASM Actions in the database
:LOGBOOK:
CLOCK: [2022-10-21 Fri 12:29]--[2022-10-21 Fri 13:58] =>  1:29
CLOCK: [2022-10-16 su 15:05]--[2022-10-16 su 17:11] =>  2:06
:END:
** STRT Create endpoints to access Actions
:LOGBOOK:
CLOCK: [2022-10-26 Wed 11:02]--[2022-10-26 Wed 11:49] =>  0:47
CLOCK: [2022-10-21 Fri 14:05]--[2022-10-21 Fri 14:46] =>  0:41
:END:
*** TODO When deleting an endpoint, delete the WASM file too
** DONE Create a proper form for uploading Actions
:LOGBOOK:
CLOCK: [2022-10-26 Wed 10:05]--[2022-10-26 Wed 11:01] =>  0:56
:END:
** TODO Implement user access control
*** TODO Disallow recreating an account
** DONE Better sessions management
:LOGBOOK:
CLOCK: [2022-10-28 Fri 14:08]--[2022-10-28 Fri 14:58] =>  0:50
:END:

** DONE Implement a logout button
:LOGBOOK:
CLOCK: [2022-10-30 su 13:57]--[2022-10-30 su 16:56] =>  2:59
:END:
** DONE Turn the WASM middleware into a better backend endpoint
:LOGBOOK:
CLOCK: [2022-11-02 Wed 10:38]--[2022-11-02 Wed 11:20] =>  0:42
CLOCK: [2022-11-02 Wed 10:13]--[2022-11-02 Wed 10:38] =>  0:25
:END:
** DONE Make endpoints protectable with a token
:LOGBOOK:
CLOCK: [2022-11-09 ke 13:06]--[2022-11-09 ke 14:27] =>  1:21
CLOCK: [2022-11-09 ke 10:35]--[2022-11-09 ke 12:43] =>  2:08
:END:
** DONE Allow frontend to modify existing endpoints
:LOGBOOK:
CLOCK: [2022-11-18 Fri 12:30]--[2022-11-18 Fri 14:24] =>  1:54
:END:
** DONE Namespace endpoints by username
:LOGBOOK:
CLOCK: [2022-11-04 Fri 12:52]--[2022-11-04 Fri 12:58] =>  0:06
CLOCK: [2022-11-04 Fri 09:41]--[2022-11-04 Fri 10:58] =>  1:17
:END:
** DONE Make sure same name cannot be reused for multiple endpoints
:LOGBOOK:
CLOCK: [2022-11-07 Mon 13:02]--[2022-11-07 Mon 14:59] =>  1:57
:END:

** DONE Create a notification area in frontend for error messages
:LOGBOOK:
CLOCK: [2022-11-07 Mon 15:04]--[2022-11-07 Mon 15:44] =>  0:40
:END:
